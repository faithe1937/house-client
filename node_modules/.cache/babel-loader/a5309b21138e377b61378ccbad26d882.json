{"ast":null,"code":"export const userSigninFetch = (user, userType) => {\n  return async dispatch => {\n    const resp = await fetch(\"http://localhost:3001/ap1/v1/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        user\n      })\n    });\n    const data = await resp.json();\n\n    if (data.message) {// Here you should have logic to handle invalid creation of a user.\n      // This assumes your Rails API will return a JSON object with a key of\n      // 'message' if there is an error with creating the user, i.e. invalid username\n    } else {\n      localStorage.setItem(\"token\", data.jwt);\n      localStorage.setItem(\"userType\", userType);\n      dispatch(loginUser(data.user, userType));\n      dispatch(signIn());\n    }\n  };\n};\nexport const userSignupFetch = user => {\n  return async dispatch => {\n    const resp = await fetch(\"http://localhost:3001/api/v1/users\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        user\n      })\n    });\n    const data = await resp.json();\n\n    if (data.message) {// Here you should have logic to handle invalid creation of a user.\n      // This assumes your Rails API will return a JSON object with a key of\n      // 'message' if there is an error with creating the user, i.e. invalid username\n    } else {\n      localStorage.setItem(\"token\", data.jwt);\n      dispatch(loginUser(data.user));\n      dispatch(signIn());\n    }\n  };\n};\nexport const getProfileFetch = () => {\n  return async dispatch => {\n    const token = localStorage.token;\n    const userType = localStorage.userType;\n\n    if (token) {\n      const resp = await fetch(\"http://localhost:3001/ap1/v1/profile\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const data = await resp.json();\n\n      if (data.message) {\n        // An error will occur if the token is invalid.\n        // If this happens, you may want to remove the invalid token.\n        localStorage.removeItem(\"token\");\n      } else {\n        dispatch(loginUser(data.user, userType));\n        dispatch(signIn());\n      }\n    }\n  };\n};\nexport const loginUser = (userObj, userType) => {\n  return {\n    type: \"LOGIN_USER\",\n    payload: userObj,\n    userType: userType\n  };\n};\nexport const logoutUser = () => ({\n  type: \"LOGOUT_USER\"\n});\nexport const signIn = () => {\n  return {\n    type: \"SIGN_IN\"\n  };\n};","map":{"version":3,"sources":["/Users/faithe1937/Desktop/flatiron/projects/mod5/reactnewnew/src/actions/index.js"],"names":["userSigninFetch","user","userType","dispatch","resp","fetch","method","headers","Accept","body","JSON","stringify","data","json","message","localStorage","setItem","jwt","loginUser","signIn","userSignupFetch","getProfileFetch","token","Authorization","removeItem","userObj","type","payload","logoutUser"],"mappings":"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","sourcesContent":["export const userSigninFetch = (user, userType) => {\n  return async dispatch => {\n    const resp = await fetch(\"http://localhost:3001/ap1/v1/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({ user })\n    });\n    const data = await resp.json();\n    if (data.message) {\n      // Here you should have logic to handle invalid creation of a user.\n      // This assumes your Rails API will return a JSON object with a key of\n      // 'message' if there is an error with creating the user, i.e. invalid username\n    } else {\n      localStorage.setItem(\"token\", data.jwt);\n      localStorage.setItem(\"userType\", userType);\n      dispatch(loginUser(data.user, userType));\n      dispatch(signIn());\n    }\n  };\n};\n\nexport const userSignupFetch = user => {\n  return async dispatch => {\n    const resp = await fetch(\"http://localhost:3001/api/v1/users\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({ user })\n    });\n    const data = await resp.json();\n    if (data.message) {\n      // Here you should have logic to handle invalid creation of a user.\n      // This assumes your Rails API will return a JSON object with a key of\n      // 'message' if there is an error with creating the user, i.e. invalid username\n    } else {\n      localStorage.setItem(\"token\", data.jwt);\n      dispatch(loginUser(data.user));\n      dispatch(signIn());\n    }\n  };\n};\n\nexport const getProfileFetch = () => {\n  return async dispatch => {\n    const token = localStorage.token;\n    const userType = localStorage.userType;\n    if (token) {\n      const resp = await fetch(\"http://localhost:3001/ap1/v1/profile\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const data = await resp.json();\n      if (data.message) {\n        // An error will occur if the token is invalid.\n        // If this happens, you may want to remove the invalid token.\n        localStorage.removeItem(\"token\");\n      } else {\n        dispatch(loginUser(data.user, userType));\n        dispatch(signIn());\n      }\n    }\n  };\n};\n\nexport const loginUser = (userObj, userType) => {\n  return {\n    type: \"LOGIN_USER\",\n    payload: userObj,\n    userType: userType\n  };\n};\nexport const logoutUser = () => ({\n  type: \"LOGOUT_USER\"\n});\n\nexport const signIn = () => {\n  return {\n    type: \"SIGN_IN\"\n  };\n};\n"]},"metadata":{},"sourceType":"module"}