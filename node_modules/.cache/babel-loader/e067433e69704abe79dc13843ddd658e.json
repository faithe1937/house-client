{"ast":null,"code":"import _slicedToArray from \"/Users/faithe1937/Desktop/flatiron/projects/mod5/reactnewnew/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/faithe1937/Desktop/flatiron/projects/mod5/reactnewnew/src/context/UserContext.js\";\nimport React, { useState, createContext } from \"react\"; // import axios from \"axios\";\n\nexport const UserContext = createContext();\nexport const UserProvider = props => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        user = _useState2[0],\n        setUser = _useState2[1]; // const [currentUser, setCurrentUser] = useState(null);\n\n\n  console.log(user);\n\n  const userSignupFetch = user => {\n    return async dispatch => {\n      const resp = await fetch(\"http://localhost:3000/api/v1/users\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify({\n          user\n        })\n      });\n      const data = await resp.json();\n\n      if (data.message) {// Here you should have logic to handle invalid creation of a user.\n        // This assumes your Rails API will return a JSON object with a key of\n        // 'message' if there is an error with creating the user, i.e. invalid username\n      } else {\n        localStorage.setItem(\"token\", data.jwt); // dispatch(loginUser(data.user));\n        // dispatch(signIn());\n      }\n    };\n  };\n\n  return React.createElement(UserContext.Provider, {\n    value: [user, setUser],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, props.children);\n};","map":{"version":3,"sources":["/Users/faithe1937/Desktop/flatiron/projects/mod5/reactnewnew/src/context/UserContext.js"],"names":["React","useState","createContext","UserContext","UserProvider","props","user","setUser","console","log","userSignupFetch","dispatch","resp","fetch","method","headers","Accept","body","JSON","stringify","data","json","message","localStorage","setItem","jwt","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,QAA+C,OAA/C,C,CACA;;AAEA,OAAO,MAAMC,WAAW,GAAGD,aAAa,EAAjC;AAEP,OAAO,MAAME,YAAY,GAAGC,KAAK,IAAI;AAAA,oBACXJ,QAAQ,CAAC,EAAD,CADG;AAAA;AAAA,QAC5BK,IAD4B;AAAA,QACtBC,OADsB,kBAEnC;;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;;AAEA,QAAMI,eAAe,GAAGJ,IAAI,IAAI;AAC9B,WAAO,MAAMK,QAAN,IAAkB;AACvB,YAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,oCAAD,EAAuC;AAC7DC,QAAAA,MAAM,EAAE,MADqD;AAE7DC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE;AAFD,SAFoD;AAM7DC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEb,UAAAA;AAAF,SAAf;AANuD,OAAvC,CAAxB;AAQA,YAAMc,IAAI,GAAG,MAAMR,IAAI,CAACS,IAAL,EAAnB;;AACA,UAAID,IAAI,CAACE,OAAT,EAAkB,CAChB;AACA;AACA;AACD,OAJD,MAIO;AACLC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,IAAI,CAACK,GAAnC,EADK,CAEL;AACA;AACD;AACF,KAnBD;AAoBD,GArBD;;AAsBA,SACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE,CAACnB,IAAD,EAAOC,OAAP,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,KAAK,CAACqB,QADT,CADF;AAKD,CAhCM","sourcesContent":["import React, { useState, createContext } from \"react\";\n// import axios from \"axios\";\n\nexport const UserContext = createContext();\n\nexport const UserProvider = props => {\n  const [user, setUser] = useState(\"\");\n  // const [currentUser, setCurrentUser] = useState(null);\n  console.log(user);\n\n  const userSignupFetch = user => {\n    return async dispatch => {\n      const resp = await fetch(\"http://localhost:3000/api/v1/users\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify({ user })\n      });\n      const data = await resp.json();\n      if (data.message) {\n        // Here you should have logic to handle invalid creation of a user.\n        // This assumes your Rails API will return a JSON object with a key of\n        // 'message' if there is an error with creating the user, i.e. invalid username\n      } else {\n        localStorage.setItem(\"token\", data.jwt);\n        // dispatch(loginUser(data.user));\n        // dispatch(signIn());\n      }\n    };\n  };\n  return (\n    <UserContext.Provider value={[user, setUser]}>\n      {props.children}\n    </UserContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}